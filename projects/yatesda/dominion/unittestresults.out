------------------Testing Function: buyCard------------------------
Initial State: p 0 HC 5 DeC 5 DiC 0 G: 30 S: 40 C: 46 Coins: 4
Final State: p 0 HC 5 DeC 5 DiC 0 G: 30 S: 40 C: 46 Coins: 4
buyCard HandCount Test: Passed!
buyCard DeckCount Test: Passed!
------------------Testing Function: numHandCards------------------------
Initial State: p 0 HC 5 DeC 5 DiC 0 G: 30 S: 40 C: 46 Coins: 4
Final State: p 0 HC 5 DeC 5 DiC 0 G: 30 S: 40 C: 46 Coins: 4
numHandCards HandCount Test: Passed!
------------------Testing Function: kingdomCards------------------------
kingdomCards Test 1: Passed!
kingdomCards Test 2: Passed!
kingdomCards Test 3: Passed!
kingdomCards Test 4: Passed!
kingdomCards Test 5: Passed!
kingdomCards Test 6: Passed!
kingdomCards Test 7: Passed!
kingdomCards Test 8: Passed!
kingdomCards Test 9: Passed!
kingdomCards Test 10: Passed!
------------------Testing Function: supplyCount------------------------
Initial State: p 0 HC 5 DeC 5 DiC 0 G: 30 S: 40 C: 46 Coins: 4
supplyCount Test: Passed!
------------------Testing Card: smithy------------------------
Initial State: p 0 HC 5 DeC 5 DiC 0
Final State: p 0 HC 6 DeC 3 DiC 0
Expected State: p 0 HC 7 DeC 2 Dic 0
smithy HandCount Test: Failed
smithy DeckCount Test: Failed
------------------Testing Card: adventurer------------------------
Initial State: p 0 HC 5 DeC 5 DiC 0 G: 30 S: 40 C: 46
Final State: p 0 HC 7 DeC 2 DiC 1 G: 30 S: 40 C: 46
Expected State: p 0 HC 7 DeC 3 Dic 0 G: 30 S: 40 C: 46
adventurer HandCount Test: Passed!
adventurer DeckCount Test: Failed!
adventurer Copper Supply Test: Passed!
adventurer Silver Supply Test: Passed!
adventurer Gold Supply Test: Passed!
------------------Testing Card: mine------------------------
Initial State: p 0 HC 5 DeC 5 DiC 0 G: 30 S: 40 C: 46
Final State: p 0 HC 5 DeC 5 DiC 0 G: 30 S: 40 C: 46
Expected State: p 0 HC 4 DeC 5 Dic 0 G: 30 S: 40 C: 46
mine HandCount Test: Failed!
mine DeckCount Test: Passed!
mine Copper Supply Test: Passed!
mine Silver Supply Test: Passed!
mine Gold Supply Test: Passed!
------------------Testing Card: feast------------------------
Initial State: p 0 HC 5 DeC 5 DiC 0 G: 30 S: 40 C: 46
Final State: p 0 HC 5 DeC 5 DiC 0 G: 30 S: 40 C: 46
Expected State: p 0 HC 5 DeC 5 Dic 1 G: 30 S: 40 C: 46
feast HandCount Test: Passed!
feast DeckCount Test: Passed!
feast Copper Supply Test: Passed!
feast Silver Supply Test: Passed!
feast Gold Supply Test: Passed!
feast Discard Count Test: Failed!
feast Coin Test: Failed!
File 'dominion.c'
Lines executed:30.19% of 593
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:
        -:    2:#include "dominion.h"
        -:    3:#include "dominion_helpers.h"
        -:    4:#include "rngs.h"
        -:    5:#include <stdio.h>
        -:    6:#include <math.h>
        -:    7:#include <stdlib.h>
        -:    8:
        -:    9:
        -:   10:/*int Adventurer(int handPos, int choice1, int choice2, int choice3, struct gameState *state);
        -:   11:int CouncilRoom(int handPos, int choice1, int choice2, int choice3, struct gameState *state);
        -:   12:int Feast(int handPos, int choice1, int choice2, int choice3, struct gameState *state);
        -:   13:int Mine(int handPos, int choice1, int choice2, int choice3, struct gameState *state);
        -:   14:int Smithy(int handPos, int choice1, int choice2, int choice3, struct gameState *state);
        -:   15:*/
        -:   16:
      222:   17:int compare(const void* a, const void* b) {
      222:   18:  if (*(int*)a > *(int*)b)
        2:   19:    return 1;
      220:   20:  if (*(int*)a < *(int*)b)
       60:   21:    return -1;
      160:   22:  return 0;
        -:   23:}
        -:   24:
    #####:   25:struct gameState* newGame() {
    #####:   26:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   27:  return g;
        -:   28:}
        -:   29:
        1:   30:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   31:		  int k8, int k9, int k10) {
        1:   32:  int* k = malloc(10 * sizeof(int));
        1:   33:  k[0] = k1;
        1:   34:  k[1] = k2;
        1:   35:  k[2] = k3;
        1:   36:  k[3] = k4;
        1:   37:  k[4] = k5;
        1:   38:  k[5] = k6;
        1:   39:  k[6] = k7;
        1:   40:  k[7] = k8;
        1:   41:  k[8] = k9;
        1:   42:  k[9] = k10;
        1:   43:  return k;
        -:   44:}
        -:   45:
        7:   46:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   47:		   struct gameState *state) {
        -:   48:
        -:   49:  int i;
        -:   50:  int j;
        -:   51:  int it;			
        -:   52:  //set up random number generator
        7:   53:  SelectStream(1);
        7:   54:  PutSeed((long)randomSeed);
        -:   55:  
        -:   56:  //check number of players
        7:   57:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   58:    {
    #####:   59:      return -1;
        -:   60:    }
        -:   61:
        -:   62:  //set number of players
        7:   63:  state->numPlayers = numPlayers;
        -:   64:
        -:   65:  //check selected kingdom cards are different
       77:   66:  for (i = 0; i < 10; i++)
        -:   67:    {
      770:   68:      for (j = 0; j < 10; j++)
        -:   69:        {
      700:   70:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   71:	    {
    #####:   72:	      return -1;
        -:   73:	    }
        -:   74:        }
        -:   75:    }
        -:   76:
        -:   77:
        -:   78:  //initialize supply
        -:   79:  ///////////////////////////////
        -:   80:
        -:   81:  //set number of Curse cards
        7:   82:  if (numPlayers == 2)
        -:   83:    {
        7:   84:      state->supplyCount[curse] = 10;
        -:   85:    }
    #####:   86:  else if (numPlayers == 3)
        -:   87:    {
    #####:   88:      state->supplyCount[curse] = 20;
        -:   89:    }
        -:   90:  else
        -:   91:    {
    #####:   92:      state->supplyCount[curse] = 30;
        -:   93:    }
        -:   94:
        -:   95:  //set number of Victory cards
        7:   96:  if (numPlayers == 2)
        -:   97:    {
        7:   98:      state->supplyCount[estate] = 8;
        7:   99:      state->supplyCount[duchy] = 8;
        7:  100:      state->supplyCount[province] = 8;
        -:  101:    }
        -:  102:  else
        -:  103:    {
    #####:  104:      state->supplyCount[estate] = 12;
    #####:  105:      state->supplyCount[duchy] = 12;
    #####:  106:      state->supplyCount[province] = 12;
        -:  107:    }
        -:  108:
        -:  109:  //set number of Treasure cards
        7:  110:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        7:  111:  state->supplyCount[silver] = 40;
        7:  112:  state->supplyCount[gold] = 30;
        -:  113:
        -:  114:  //set number of Kingdom cards
      147:  115:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  116:    {
     1155:  117:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  118:	{
     1085:  119:	  if (kingdomCards[j] == i)
        -:  120:	    {
        -:  121:	      //check if card is a 'Victory' Kingdom card
       70:  122:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  123:		{
       28:  124:		  if (numPlayers == 2){ 
       14:  125:		    state->supplyCount[i] = 8; 
        -:  126:		  }
    #####:  127:		  else{ state->supplyCount[i] = 12; }
        -:  128:		}
        -:  129:	      else
        -:  130:		{
       56:  131:		  state->supplyCount[i] = 10;
        -:  132:		}
       70:  133:	      break;
        -:  134:	    }
        -:  135:	  else    //card is not in the set choosen for the game
        -:  136:	    {
     1015:  137:	      state->supplyCount[i] = -1;
        -:  138:	    }
        -:  139:	}
        -:  140:
        -:  141:    }
        -:  142:
        -:  143:  ////////////////////////
        -:  144:  //supply intilization complete
        -:  145:
        -:  146:  //set player decks
       21:  147:  for (i = 0; i < numPlayers; i++)
        -:  148:    {
       14:  149:      state->deckCount[i] = 0;
       56:  150:      for (j = 0; j < 3; j++)
        -:  151:	{
       42:  152:	  state->deck[i][j] = estate;
       42:  153:	  state->deckCount[i]++;
        -:  154:	}
      112:  155:      for (j = 3; j < 10; j++)
        -:  156:	{
       98:  157:	  state->deck[i][j] = copper;
       98:  158:	  state->deckCount[i]++;		
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //shuffle player decks
       21:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {
       14:  165:      if ( shuffle(i, state) < 0 )
        -:  166:	{
    #####:  167:	  return -1;
        -:  168:	}
        -:  169:    }
        -:  170:
        -:  171:  //draw player hands
       21:  172:  for (i = 0; i < numPlayers; i++)
        -:  173:    {  
        -:  174:      //initialize hand size to zero
       14:  175:      state->handCount[i] = 0;
       14:  176:      state->discardCount[i] = 0;
        -:  177:      //draw 5 cards
        -:  178:      // for (j = 0; j < 5; j++)
        -:  179:      //	{
        -:  180:      //	  drawCard(i, state);
        -:  181:      //	}
        -:  182:    }
        -:  183:  
        -:  184:  //set embargo tokens to 0 for all supply piles
      196:  185:  for (i = 0; i <= treasure_map; i++)
        -:  186:    {
      189:  187:      state->embargoTokens[i] = 0;
        -:  188:    }
        -:  189:
        -:  190:  //initialize first player's turn
        7:  191:  state->outpostPlayed = 0;
        7:  192:  state->phase = 0;
        7:  193:  state->numActions = 1;
        7:  194:  state->numBuys = 1;
        7:  195:  state->playedCardCount = 0;
        7:  196:  state->whoseTurn = 0;
        7:  197:  state->handCount[state->whoseTurn] = 0;
        -:  198:  //int it; move to top
        -:  199:
        -:  200:  //Moved draw cards to here, only drawing at the start of a turn
       42:  201:  for (it = 0; it < 5; it++){
       35:  202:    drawCard(state->whoseTurn, state);
        -:  203:  }
        -:  204:
        7:  205:  updateCoins(state->whoseTurn, state, 0);
        -:  206:
        7:  207:  return 0;
        -:  208:}
        -:  209:
       17:  210:int shuffle(int player, struct gameState *state) {
        -:  211: 
        -:  212:
        -:  213:  int newDeck[MAX_DECK];
       17:  214:  int newDeckPos = 0;
        -:  215:  int card;
        -:  216:  int i;
        -:  217:
       17:  218:  if (state->deckCount[player] < 1)
    #####:  219:    return -1;
       17:  220:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  221:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  222:
      186:  223:  while (state->deckCount[player] > 0) {
      152:  224:    card = floor(Random() * state->deckCount[player]);
      152:  225:    newDeck[newDeckPos] = state->deck[player][card];
      152:  226:    newDeckPos++;
      514:  227:    for (i = card; i < state->deckCount[player]-1; i++) {
      362:  228:      state->deck[player][i] = state->deck[player][i+1];
        -:  229:    }
      152:  230:    state->deckCount[player]--;
        -:  231:  }
      169:  232:  for (i = 0; i < newDeckPos; i++) {
      152:  233:    state->deck[player][i] = newDeck[i];
      152:  234:    state->deckCount[player]++;
        -:  235:  }
        -:  236:
       17:  237:  return 0;
        -:  238:}
        -:  239:
    #####:  240:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  241:{	
        -:  242:  int card;
    #####:  243:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  244:
        -:  245:  //check if it is the right phase
    #####:  246:  if (state->phase != 0)
        -:  247:    {
    #####:  248:      return -1;
        -:  249:    }
        -:  250:	
        -:  251:  //check if player has enough actions
    #####:  252:  if ( state->numActions < 1 )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //get card played
    #####:  258:  card = handCard(handPos, state);
        -:  259:	
        -:  260:  //check if selected card is an action
    #####:  261:  if ( card < adventurer || card > treasure_map )
        -:  262:    {
    #####:  263:      return -1;
        -:  264:    }
        -:  265:	
        -:  266:  //play card
    #####:  267:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  268:    {
    #####:  269:      return -1;
        -:  270:    }
        -:  271:	
        -:  272:  //reduce number of actions
    #####:  273:  state->numActions--;
        -:  274:
        -:  275:  //update coins (Treasure cards may be added with card draws)
    #####:  276:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  277:	
    #####:  278:  return 0;
        -:  279:}
        -:  280:
    #####:  281:int buyCard(int supplyPos, struct gameState *state) {
        -:  282:  int who;
        -:  283:  if (DEBUG){
        -:  284:    printf("Entering buyCard...\n");
        -:  285:  }
        -:  286:
        -:  287:  // I don't know what to do about the phase thing.
        -:  288:
    #####:  289:  who = state->whoseTurn;
        -:  290:
    #####:  291:  if (state->numBuys < 1){
        -:  292:    if (DEBUG)
        -:  293:      printf("You do not have any buys left\n");
    #####:  294:    return -1;
    #####:  295:  } else if (supplyCount(supplyPos, state) <1){
        -:  296:    if (DEBUG)
        -:  297:      printf("There are not any of that type of card left\n");
    #####:  298:    return -1;
    #####:  299:  } else if (state->coins < getCost(supplyPos)){
        -:  300:    if (DEBUG) 
        -:  301:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  302:    return -1;
        -:  303:  } else {
    #####:  304:    state->phase=1;
        -:  305:    //state->supplyCount[supplyPos]--;
    #####:  306:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  307:  
    #####:  308:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  309:    state->numBuys--;
        -:  310:    if (DEBUG)
        -:  311:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  312:  }
        -:  313:
        -:  314:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  315:  //state->discardCount[who]++;
        -:  316:    
    #####:  317:  return 0;
        -:  318:}
        -:  319:
        1:  320:int numHandCards(struct gameState *state) {
        1:  321:  return state->handCount[ whoseTurn(state) ];
        -:  322:}
        -:  323:
    #####:  324:int handCard(int handPos, struct gameState *state) {
    #####:  325:  int currentPlayer = whoseTurn(state);
    #####:  326:  return state->hand[currentPlayer][handPos];
        -:  327:}
        -:  328:
        4:  329:int supplyCount(int card, struct gameState *state) {
        4:  330:  return state->supplyCount[card];
        -:  331:}
        -:  332:
    #####:  333:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  334:  int i;
    #####:  335:  int count = 0;
        -:  336:
    #####:  337:  for (i = 0; i < state->deckCount[player]; i++)
        -:  338:    {
    #####:  339:      if (state->deck[player][i] == card) count++;
        -:  340:    }
        -:  341:
    #####:  342:  for (i = 0; i < state->handCount[player]; i++)
        -:  343:    {
    #####:  344:      if (state->hand[player][i] == card) count++;
        -:  345:    }
        -:  346:
    #####:  347:  for (i = 0; i < state->discardCount[player]; i++)
        -:  348:    {
    #####:  349:      if (state->discard[player][i] == card) count++;
        -:  350:    }
        -:  351:
    #####:  352:  return count;
        -:  353:}
        -:  354:
       14:  355:int whoseTurn(struct gameState *state) {
       14:  356:  return state->whoseTurn;
        -:  357:}
        -:  358:
    #####:  359:int endTurn(struct gameState *state) {
        -:  360:  int k;
        -:  361:  int i;
    #####:  362:  int currentPlayer = whoseTurn(state);
        -:  363:  
        -:  364:  //Discard hand
    #####:  365:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  366:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  367:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  368:  }
    #####:  369:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  370:    
        -:  371:  //Code for determining the player
    #####:  372:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  373:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  374:  }
        -:  375:  else{
    #####:  376:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  377:  }
        -:  378:
    #####:  379:  state->outpostPlayed = 0;
    #####:  380:  state->phase = 0;
    #####:  381:  state->numActions = 1;
    #####:  382:  state->coins = 0;
    #####:  383:  state->numBuys = 1;
    #####:  384:  state->playedCardCount = 0;
    #####:  385:  state->handCount[state->whoseTurn] = 0;
        -:  386:
        -:  387:  //int k; move to top
        -:  388:  //Next player draws hand
    #####:  389:  for (k = 0; k < 5; k++){
    #####:  390:    drawCard(state->whoseTurn, state);//Draw a card
        -:  391:  }
        -:  392:
        -:  393:  //Update money
    #####:  394:  updateCoins(state->whoseTurn, state , 0);
        -:  395:
    #####:  396:  return 0;
        -:  397:}
        -:  398:
    #####:  399:int isGameOver(struct gameState *state) {
        -:  400:  int i;
        -:  401:  int j;
        -:  402:	
        -:  403:  //if stack of Province cards is empty, the game ends
    #####:  404:  if (state->supplyCount[province] == 0)
        -:  405:    {
    #####:  406:      return 1;
        -:  407:    }
        -:  408:
        -:  409:  //if three supply pile are at 0, the game ends
    #####:  410:  j = 0;
    #####:  411:  for (i = 0; i < 25; i++)
        -:  412:    {
    #####:  413:      if (state->supplyCount[i] == 0)
        -:  414:	{
    #####:  415:	  j++;
        -:  416:	}
        -:  417:    }
    #####:  418:  if ( j >= 3)
        -:  419:    {
    #####:  420:      return 1;
        -:  421:    }
        -:  422:
    #####:  423:  return 0;
        -:  424:}
        -:  425:
    #####:  426:int scoreFor (int player, struct gameState *state) {
        -:  427:
        -:  428:  int i;
    #####:  429:  int score = 0;
        -:  430:  //score from hand
    #####:  431:  for (i = 0; i < state->handCount[player]; i++)
        -:  432:    {
    #####:  433:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  434:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  435:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  436:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  437:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  438:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  439:    }
        -:  440:
        -:  441:  //score from discard
    #####:  442:  for (i = 0; i < state->discardCount[player]; i++)
        -:  443:    {
    #####:  444:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  445:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  446:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  447:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  448:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  449:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  450:    }
        -:  451:
        -:  452:  //score from deck
    #####:  453:  for (i = 0; i < state->discardCount[player]; i++)
        -:  454:    {
    #####:  455:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  456:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  457:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  458:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  459:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  460:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  461:    }
        -:  462:
    #####:  463:  return score;
        -:  464:}
        -:  465:
    #####:  466:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  467:  int i;	
        -:  468:  int j;
        -:  469:  int highScore;
        -:  470:  int currentPlayer;
        -:  471:
        -:  472:  //get score for each player
    #####:  473:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  474:    {
        -:  475:      //set unused player scores to -9999
    #####:  476:      if (i >= state->numPlayers)
        -:  477:	{
    #####:  478:	  players[i] = -9999;
        -:  479:	}
        -:  480:      else
        -:  481:	{
    #####:  482:	  players[i] = scoreFor (i, state);
        -:  483:	}
        -:  484:    }
        -:  485:
        -:  486:  //find highest score
    #####:  487:  j = 0;
    #####:  488:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  489:    {
    #####:  490:      if (players[i] > players[j])
        -:  491:	{
    #####:  492:	  j = i;
        -:  493:	}
        -:  494:    }
    #####:  495:  highScore = players[j];
        -:  496:
        -:  497:  //add 1 to players who had less turns
    #####:  498:  currentPlayer = whoseTurn(state);
    #####:  499:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  500:    {
    #####:  501:      if ( players[i] == highScore && i > currentPlayer )
        -:  502:	{
    #####:  503:	  players[i]++;
        -:  504:	}
        -:  505:    }
        -:  506:
        -:  507:  //find new highest score
    #####:  508:  j = 0;
    #####:  509:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  510:    {
    #####:  511:      if ( players[i] > players[j] )
        -:  512:	{
    #####:  513:	  j = i;
        -:  514:	}
        -:  515:    }
    #####:  516:  highScore = players[j];
        -:  517:
        -:  518:  //set winners in array to 1 and rest to 0
    #####:  519:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  520:    {
    #####:  521:      if ( players[i] == highScore )
        -:  522:	{
    #####:  523:	  players[i] = 1;
        -:  524:	}
        -:  525:      else
        -:  526:	{
    #####:  527:	  players[i] = 0;
        -:  528:	}
        -:  529:    }
        -:  530:
    #####:  531:  return 0;
        -:  532:}
        -:  533:
       43:  534:int drawCard(int player, struct gameState *state)
        -:  535:{	int count;
        -:  536:  int deckCounter;
       43:  537:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  538:    
        -:  539:    //Step 1 Shuffle the discard pile back into a deck
        -:  540:    int i;
        -:  541:    //Move discard to deck
    #####:  542:    for (i = 0; i < state->discardCount[player];i++){
    #####:  543:      state->deck[player][i] = state->discard[player][i];
    #####:  544:      state->discard[player][i] = -1;
        -:  545:    }
        -:  546:
    #####:  547:    state->deckCount[player] = state->discardCount[player];
    #####:  548:    state->discardCount[player] = 0;//Reset discard
        -:  549:
        -:  550:    //Shufffle the deck
    #####:  551:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  552:   
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  555:    }
        -:  556:    
    #####:  557:    state->discardCount[player] = 0;
        -:  558:
        -:  559:    //Step 2 Draw Card
    #####:  560:    count = state->handCount[player];//Get current player's hand count
        -:  561:    
        -:  562:    if (DEBUG){//Debug statements
        -:  563:      printf("Current hand count: %d\n", count);
        -:  564:    }
        -:  565:    
    #####:  566:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  567:
    #####:  568:    if (deckCounter == 0)
    #####:  569:      return -1;
        -:  570:
    #####:  571:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  572:    state->deckCount[player]--;
    #####:  573:    state->handCount[player]++;//Increment hand count
        -:  574:  }
        -:  575:
        -:  576:  else{
       43:  577:    int count = state->handCount[player];//Get current hand count for player
        -:  578:    int deckCounter;
        -:  579:    if (DEBUG){//Debug statements
        -:  580:      printf("Current hand count: %d\n", count);
        -:  581:    }
        -:  582:
       43:  583:    deckCounter = state->deckCount[player];//Create holder for the deck count
       43:  584:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       43:  585:    state->deckCount[player]--;
       43:  586:    state->handCount[player]++;//Increment hand count
        -:  587:  }
        -:  588:
       43:  589:  return 0;
        -:  590:}
        -:  591:
        5:  592:int getCost(int cardNumber)
        -:  593:{
        5:  594:  switch( cardNumber ) 
        -:  595:    {
        -:  596:    case curse:
        1:  597:      return 0;
        -:  598:    case estate:
        2:  599:      return 2;
        -:  600:    case duchy:
    #####:  601:      return 5;
        -:  602:    case province:
    #####:  603:      return 8;
        -:  604:    case copper:
        2:  605:      return 0;
        -:  606:    case silver:
    #####:  607:      return 3;
        -:  608:    case gold:
    #####:  609:      return 6;
        -:  610:    case adventurer:
    #####:  611:      return 6;
        -:  612:    case council_room:
    #####:  613:      return 5;
        -:  614:    case feast:
    #####:  615:      return 4;
        -:  616:    case gardens:
    #####:  617:      return 4;
        -:  618:    case mine:
    #####:  619:      return 5;
        -:  620:    case remodel:
    #####:  621:      return 4;
        -:  622:    case smithy:
    #####:  623:      return 4;
        -:  624:    case village:
    #####:  625:      return 3;
        -:  626:    case baron:
    #####:  627:      return 4;
        -:  628:    case great_hall:
    #####:  629:      return 3;
        -:  630:    case minion:
    #####:  631:      return 5;
        -:  632:    case steward:
    #####:  633:      return 3;
        -:  634:    case tribute:
    #####:  635:      return 5;
        -:  636:    case ambassador:
    #####:  637:      return 3;
        -:  638:    case cutpurse:
    #####:  639:      return 4;
        -:  640:    case embargo: 
    #####:  641:      return 2;
        -:  642:    case outpost:
    #####:  643:      return 5;
        -:  644:    case salvager:
    #####:  645:      return 4;
        -:  646:    case sea_hag:
    #####:  647:      return 4;
        -:  648:    case treasure_map:
    #####:  649:      return 4;
        -:  650:    }
        -:  651:	
    #####:  652:  return -1;
        -:  653:}
        -:  654:
    #####:  655:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  656:{
        -:  657:  int i;
        -:  658:  int j;
        -:  659:  int k;
        -:  660:  int x;
        -:  661:  int index;
    #####:  662:  int currentPlayer = whoseTurn(state);
    #####:  663:  int nextPlayer = currentPlayer + 1;
        -:  664:
    #####:  665:  int tributeRevealedCards[2] = {-1, -1};
        -:  666:  int temphand[MAX_HAND];// moved above the if statement
    #####:  667:  int drawntreasure=0;
        -:  668:  int cardDrawn;
    #####:  669:  int z = 0;// this is the counter for the temp hand
    #####:  670:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  671:    nextPlayer = 0;
        -:  672:  }
        -:  673:  
        -:  674:	
        -:  675:  //uses switch to select card and perform actions
    #####:  676:  switch( card ) 
        -:  677:    {
        -:  678:    case adventurer:
        -:  679:
    #####:  680:	Adventurer(handPos, choice1, choice2, choice3, state);
        -:  681:
        -:  682:			
        -:  683:    case council_room:
        -:  684:    	
    #####:  685:	CouncilRoom(handPos, choice1, choice2, choice3, state);
        -:  686:			
        -:  687:    case feast:
        -:  688:
    #####:  689:    	Feast(handPos, choice1, choice2, choice3, state);
        -:  690:			
        -:  691:    case gardens:
    #####:  692:      return -1;
        -:  693:			
        -:  694:    case mine:
        -:  695:      
    #####:  696:	Mine(handPos, choice1, choice2, choice3, state);
        -:  697:			
        -:  698:    case remodel:
    #####:  699:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  700:
    #####:  701:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  702:	{
    #####:  703:	  return -1;
        -:  704:	}
        -:  705:
    #####:  706:      gainCard(choice2, state, 0, currentPlayer);
        -:  707:
        -:  708:      //discard card from hand
    #####:  709:      discardCard(handPos, currentPlayer, state, 0);
        -:  710:
        -:  711:      //discard trashed card
    #####:  712:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  713:	{
    #####:  714:	  if (state->hand[currentPlayer][i] == j)
        -:  715:	    {
    #####:  716:	      discardCard(i, currentPlayer, state, 0);			
    #####:  717:	      break;
        -:  718:	    }
        -:  719:	}
        -:  720:
        -:  721:
    #####:  722:      return 0;
        -:  723:		
        -:  724:      case smithy:
        -:  725:      //+3 Cards
    #####:  726:      	Smithy(handPos, choice1, choice2, choice3, state);
        -:  727:		
        -:  728:    case village:
        -:  729:      //+1 Card
    #####:  730:      drawCard(currentPlayer, state);
        -:  731:			
        -:  732:      //+2 Actions
    #####:  733:      state->numActions = state->numActions + 2;
        -:  734:			
        -:  735:      //discard played card from hand
    #####:  736:      discardCard(handPos, currentPlayer, state, 0);
    #####:  737:      return 0;
        -:  738:		
        -:  739:    case baron:
    #####:  740:      state->numBuys++;//Increase buys by 1!
    #####:  741:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  742:	int p = 0;//Iterator for hand!
    #####:  743:	int card_not_discarded = 1;//Flag for discard set!
    #####:  744:	while(card_not_discarded){
    #####:  745:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  746:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  747:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  748:	    state->discardCount[currentPlayer]++;
    #####:  749:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  750:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  751:	    }
    #####:  752:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  753:	    state->handCount[currentPlayer]--;
    #####:  754:	    card_not_discarded = 0;//Exit the loop
        -:  755:	  }
    #####:  756:	  else if (p > state->handCount[currentPlayer]){
        -:  757:	    if(DEBUG) {
        -:  758:	      printf("No estate cards in your hand, invalid choice\n");
        -:  759:	      printf("Must gain an estate if there are any\n");
        -:  760:	    }
    #####:  761:	    if (supplyCount(estate, state) > 0){
    #####:  762:	      gainCard(estate, state, 0, currentPlayer);
    #####:  763:	      state->supplyCount[estate]--;//Decrement estates
    #####:  764:	      if (supplyCount(estate, state) == 0){
    #####:  765:		isGameOver(state);
        -:  766:	      }
        -:  767:	    }
    #####:  768:	    card_not_discarded = 0;//Exit the loop
        -:  769:	  }
        -:  770:			    
        -:  771:	  else{
    #####:  772:	    p++;//Next card
        -:  773:	  }
        -:  774:	}
        -:  775:      }
        -:  776:			    
        -:  777:      else{
    #####:  778:	if (supplyCount(estate, state) > 0){
    #####:  779:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  780:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  781:	  if (supplyCount(estate, state) == 0){
    #####:  782:	    isGameOver(state);
        -:  783:	  }
        -:  784:	}
        -:  785:      }
        -:  786:	    
        -:  787:      
    #####:  788:      return 0;
        -:  789:		
        -:  790:    case great_hall:
        -:  791:      //+1 Card
    #####:  792:      drawCard(currentPlayer, state);
        -:  793:			
        -:  794:      //+1 Actions
    #####:  795:      state->numActions++;
        -:  796:			
        -:  797:      //discard card from hand
    #####:  798:      discardCard(handPos, currentPlayer, state, 0);
    #####:  799:      return 0;
        -:  800:		
        -:  801:    case minion:
        -:  802:      //+1 action
    #####:  803:      state->numActions++;
        -:  804:			
        -:  805:      //discard card from hand
    #####:  806:      discardCard(handPos, currentPlayer, state, 0);
        -:  807:			
    #####:  808:      if (choice1)		//+2 coins
        -:  809:	{
    #####:  810:	  state->coins = state->coins + 2;
        -:  811:	}
        -:  812:			
    #####:  813:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  814:	{
        -:  815:	  //discard hand
    #####:  816:	  while(numHandCards(state) > 0)
        -:  817:	    {
    #####:  818:	      discardCard(handPos, currentPlayer, state, 0);
        -:  819:	    }
        -:  820:				
        -:  821:	  //draw 4
    #####:  822:	  for (i = 0; i < 4; i++)
        -:  823:	    {
    #####:  824:	      drawCard(currentPlayer, state);
        -:  825:	    }
        -:  826:				
        -:  827:	  //other players discard hand and redraw if hand size > 4
    #####:  828:	  for (i = 0; i < state->numPlayers; i++)
        -:  829:	    {
    #####:  830:	      if (i != currentPlayer)
        -:  831:		{
    #####:  832:		  if ( state->handCount[i] > 4 )
        -:  833:		    {
        -:  834:		      //discard hand
    #####:  835:		      while( state->handCount[i] > 0 )
        -:  836:			{
    #####:  837:			  discardCard(handPos, i, state, 0);
        -:  838:			}
        -:  839:							
        -:  840:		      //draw 4
    #####:  841:		      for (j = 0; j < 4; j++)
        -:  842:			{
    #####:  843:			  drawCard(i, state);
        -:  844:			}
        -:  845:		    }
        -:  846:		}
        -:  847:	    }
        -:  848:				
        -:  849:	}
    #####:  850:      return 0;
        -:  851:		
        -:  852:    case steward:
    #####:  853:      if (choice1 == 1)
        -:  854:	{
        -:  855:	  //+2 cards
    #####:  856:	  drawCard(currentPlayer, state);
    #####:  857:	  drawCard(currentPlayer, state);
        -:  858:	}
    #####:  859:      else if (choice1 == 2)
        -:  860:	{
        -:  861:	  //+2 coins
    #####:  862:	  state->coins = state->coins + 2;
        -:  863:	}
        -:  864:      else
        -:  865:	{
        -:  866:	  //trash 2 cards in hand
    #####:  867:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  868:	  discardCard(choice3, currentPlayer, state, 1);
        -:  869:	}
        -:  870:			
        -:  871:      //discard card from hand
    #####:  872:      discardCard(handPos, currentPlayer, state, 0);
    #####:  873:      return 0;
        -:  874:		
        -:  875:    case tribute:
    #####:  876:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  877:	if (state->deckCount[nextPlayer] > 0){
    #####:  878:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  879:	  state->deckCount[nextPlayer]--;
        -:  880:	}
    #####:  881:	else if (state->discardCount[nextPlayer] > 0){
    #####:  882:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  883:	  state->discardCount[nextPlayer]--;
        -:  884:	}
        -:  885:	else{
        -:  886:	  //No Card to Reveal
        -:  887:	  if (DEBUG){
        -:  888:	    printf("No cards to reveal\n");
        -:  889:	  }
        -:  890:	}
        -:  891:      }
        -:  892:	    
        -:  893:      else{
    #####:  894:	if (state->deckCount[nextPlayer] == 0){
    #####:  895:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  896:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  897:	    state->deckCount[nextPlayer]++;
    #####:  898:	    state->discard[nextPlayer][i] = -1;
    #####:  899:	    state->discardCount[nextPlayer]--;
        -:  900:	  }
        -:  901:			    
    #####:  902:	  shuffle(nextPlayer,state);//Shuffle the deck
        -:  903:	} 
    #####:  904:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  905:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  906:	state->deckCount[nextPlayer]--;
    #####:  907:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  908:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  909:	state->deckCount[nextPlayer]--;
        -:  910:      }    
        -:  911:		       
    #####:  912:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####:  913:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  914:	state->playedCardCount++;
    #####:  915:	tributeRevealedCards[1] = -1;
        -:  916:      }
        -:  917:
    #####:  918:      for (i = 0; i <= 2; i ++){
    #####:  919:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  920:	  state->coins += 2;
        -:  921:	}
        -:  922:		    
    #####:  923:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  924:	  drawCard(currentPlayer, state);
    #####:  925:	  drawCard(currentPlayer, state);
        -:  926:	}
        -:  927:	else{//Action Card
    #####:  928:	  state->numActions = state->numActions + 2;
        -:  929:	}
        -:  930:      }
        -:  931:	    
    #####:  932:      return 0;
        -:  933:		
        -:  934:    case ambassador:
    #####:  935:      j = 0;		//used to check if player has enough cards to discard
        -:  936:
    #####:  937:      if (choice2 > 2 || choice2 < 0)
        -:  938:	{
    #####:  939:	  return -1;				
        -:  940:	}
        -:  941:
    #####:  942:      if (choice1 == handPos)
        -:  943:	{
    #####:  944:	  return -1;
        -:  945:	}
        -:  946:
    #####:  947:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  948:	{
    #####:  949:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -:  950:	    {
    #####:  951:	      j++;
        -:  952:	    }
        -:  953:	}
    #####:  954:      if (j < choice2)
        -:  955:	{
    #####:  956:	  return -1;				
        -:  957:	}
        -:  958:
        -:  959:      if (DEBUG) 
        -:  960:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  961:
        -:  962:      //increase supply count for choosen card by amount being discarded
    #####:  963:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  964:			
        -:  965:      //each other player gains a copy of revealed card
    #####:  966:      for (i = 0; i < state->numPlayers; i++)
        -:  967:	{
    #####:  968:	  if (i != currentPlayer)
        -:  969:	    {
    #####:  970:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -:  971:	    }
        -:  972:	}
        -:  973:
        -:  974:      //discard played card from hand
    #####:  975:      discardCard(handPos, currentPlayer, state, 0);			
        -:  976:
        -:  977:      //trash copies of cards returned to supply
    #####:  978:      for (j = 0; j < choice2; j++)
        -:  979:	{
    #####:  980:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  981:	    {
    #####:  982:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -:  983:		{
    #####:  984:		  discardCard(i, currentPlayer, state, 1);
    #####:  985:		  break;
        -:  986:		}
        -:  987:	    }
        -:  988:	}			
        -:  989:
    #####:  990:      return 0;
        -:  991:		
        -:  992:    case cutpurse:
        -:  993:
    #####:  994:      updateCoins(currentPlayer, state, 2);
    #####:  995:      for (i = 0; i < state->numPlayers; i++)
        -:  996:	{
    #####:  997:	  if (i != currentPlayer)
        -:  998:	    {
    #####:  999:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1000:		{
    #####: 1001:		  if (state->hand[i][j] == copper)
        -: 1002:		    {
    #####: 1003:		      discardCard(j, i, state, 0);
    #####: 1004:		      break;
        -: 1005:		    }
    #####: 1006:		  if (j == state->handCount[i])
        -: 1007:		    {
    #####: 1008:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1009:			{
        -: 1010:			  if (DEBUG)
        -: 1011:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1012:			}	
    #####: 1013:		      break;
        -: 1014:		    }		
        -: 1015:		}
        -: 1016:					
        -: 1017:	    }
        -: 1018:				
        -: 1019:	}				
        -: 1020:
        -: 1021:      //discard played card from hand
    #####: 1022:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1023:
    #####: 1024:      return 0;
        -: 1025:
        -: 1026:		
        -: 1027:    case embargo: 
        -: 1028:      //+2 Coins
    #####: 1029:      state->coins = state->coins + 2;
        -: 1030:			
        -: 1031:      //see if selected pile is in play
    #####: 1032:      if ( state->supplyCount[choice1] == -1 )
        -: 1033:	{
    #####: 1034:	  return -1;
        -: 1035:	}
        -: 1036:			
        -: 1037:      //add embargo token to selected supply pile
    #####: 1038:      state->embargoTokens[choice1]++;
        -: 1039:			
        -: 1040:      //trash card
    #####: 1041:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1042:      return 0;
        -: 1043:		
        -: 1044:    case outpost:
        -: 1045:      //set outpost flag
    #####: 1046:      state->outpostPlayed++;
        -: 1047:			
        -: 1048:      //discard card
    #####: 1049:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1050:      return 0;
        -: 1051:		
        -: 1052:    case salvager:
        -: 1053:      //+1 buy
    #####: 1054:      state->numBuys++;
        -: 1055:			
    #####: 1056:      if (choice1)
        -: 1057:	{
        -: 1058:	  //gain coins equal to trashed card
    #####: 1059:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1060:	  //trash card
    #####: 1061:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1062:	}
        -: 1063:			
        -: 1064:      //discard card
    #####: 1065:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1066:      return 0;
        -: 1067:		
        -: 1068:    case sea_hag:
    #####: 1069:      for (i = 0; i < state->numPlayers; i++){
    #####: 1070:	if (i != currentPlayer){
    #####: 1071:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1072:	  state->discardCount[i]++;
    #####: 1073:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1074:	}
        -: 1075:      }
    #####: 1076:      return 0;
        -: 1077:		
        -: 1078:    case treasure_map:
        -: 1079:      //search hand for another treasure_map
    #####: 1080:      index = -1;
    #####: 1081:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1082:	{
    #####: 1083:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1084:	    {
    #####: 1085:	      index = i;
    #####: 1086:	      break;
        -: 1087:	    }
        -: 1088:	}
    #####: 1089:      if (index > -1)
        -: 1090:	{
        -: 1091:	  //trash both treasure cards
    #####: 1092:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1093:	  discardCard(index, currentPlayer, state, 1);
        -: 1094:
        -: 1095:	  //gain 4 Gold cards
    #####: 1096:	  for (i = 0; i < 4; i++)
        -: 1097:	    {
    #####: 1098:	      gainCard(gold, state, 1, currentPlayer);
        -: 1099:	    }
        -: 1100:				
        -: 1101:	  //return success
    #####: 1102:	  return 1;
        -: 1103:	}
        -: 1104:			
        -: 1105:      //no second treasure_map found in hand
    #####: 1106:      return -1;
        -: 1107:    }
        -: 1108:	
    #####: 1109:  return -1;
        -: 1110:}
        -: 1111:
        3: 1112:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1113:{
        -: 1114:	
        -: 1115:  //if card is not trashed, added to Played pile 
        3: 1116:  if (trashFlag < 1)
        -: 1117:    {
        -: 1118:      //add card to played pile
        3: 1119:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        3: 1120:      state->playedCardCount++;
        -: 1121:    }
        -: 1122:	
        -: 1123:  //set played card to -1
        3: 1124:  state->hand[currentPlayer][handPos] = -1;
        -: 1125:	
        -: 1126:  //remove card from player's hand
        3: 1127:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1128:    {
        -: 1129:      //reduce number of cards in hand
    #####: 1130:      state->handCount[currentPlayer]--;
        -: 1131:    }
        3: 1132:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1133:    {
        -: 1134:      //reduce number of cards in hand
    #####: 1135:      state->handCount[currentPlayer]--;
        -: 1136:    }
        -: 1137:  else 	
        -: 1138:    {
        -: 1139:      //replace discarded card with last card in hand
        3: 1140:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1141:      //set last card to -1
        3: 1142:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1143:      //reduce number of cards in hand
        3: 1144:      state->handCount[currentPlayer]--;
        -: 1145:    }
        -: 1146:	
        3: 1147:  return 0;
        -: 1148:}
        -: 1149:
        2: 1150:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1151:{
        -: 1152:  //Note: supplyPos is enum of choosen card
        -: 1153:	
        -: 1154:  //check if supply pile is empty (0) or card is not used in game (-1)
        2: 1155:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1156:    {
    #####: 1157:      return -1;
        -: 1158:    }
        -: 1159:	
        -: 1160:  //added card for [whoseTurn] current player:
        -: 1161:  // toFlag = 0 : add to discard
        -: 1162:  // toFlag = 1 : add to deck
        -: 1163:  // toFlag = 2 : add to hand
        -: 1164:
        2: 1165:  if (toFlag == 1)
        -: 1166:    {
    #####: 1167:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1168:      state->deckCount[player]++;
        -: 1169:    }
        2: 1170:  else if (toFlag == 2)
        -: 1171:    {
        1: 1172:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        1: 1173:      state->handCount[player]++;
        -: 1174:    }
        -: 1175:  else
        -: 1176:    {
        1: 1177:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        1: 1178:      state->discardCount[player]++;
        -: 1179:    }
        -: 1180:	
        -: 1181:  //decrease number in supply pile
        2: 1182:  state->supplyCount[supplyPos]--;
        -: 1183:	 
        2: 1184:  return 0;
        -: 1185:}
        -: 1186:
        8: 1187:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1188:{
        -: 1189:  int i;
        -: 1190:	
        -: 1191:  //reset coin count
        8: 1192:  state->coins = 0;
        -: 1193:
        -: 1194:  //add coins for each Treasure card in player's hand
       48: 1195:  for (i = 0; i < state->handCount[player]; i++)
        -: 1196:    {
       40: 1197:      if (state->hand[player][i] == copper)
        -: 1198:	{
       28: 1199:	  state->coins += 1;
        -: 1200:	}
       12: 1201:      else if (state->hand[player][i] == silver)
        -: 1202:	{
    #####: 1203:	  state->coins += 2;
        -: 1204:	}
       12: 1205:      else if (state->hand[player][i] == gold)
        -: 1206:	{
    #####: 1207:	  state->coins += 3;
        -: 1208:	}	
        -: 1209:    }	
        -: 1210:
        -: 1211:  //add bonus
        8: 1212:  state->coins += bonus;
        -: 1213:
        8: 1214:  return 0;
        -: 1215:}
        -: 1216:
        -: 1217://Assignment 2 - refactored card functions 
        -: 1218:
        1: 1219:int Adventurer(int handPos, int choice1, int choice2, int choice3, struct gameState *state){
        -: 1220:
        -: 1221:  int i;
        -: 1222:  int j;
        -: 1223:  int k;
        -: 1224:  int x;
        -: 1225:  int index;
        1: 1226:  int currentPlayer = whoseTurn(state);
        1: 1227:  int nextPlayer = currentPlayer + 1;
        -: 1228:
        1: 1229:  int tributeRevealedCards[2] = {-1, -1};
        -: 1230:  int temphand[MAX_HAND];// moved above the if statement
        1: 1231:  int drawntreasure=0;
        -: 1232:  int cardDrawn;
        1: 1233:  int z = 0;// this is the counter for the temp hand
        1: 1234:  if (nextPlayer > (state->numPlayers - 1)){
    #####: 1235:    nextPlayer = 0;
        -: 1236:  }
        -: 1237:
        5: 1238:  while(drawntreasure<2){
        3: 1239:	if (state->deckCount[currentPlayer] > 1){ //Assignment 2 Bug: Changed < to > 
        -: 1240:	//if the deck is empty we need to shuffle discard and add to deck
        3: 1241:	  shuffle(currentPlayer, state);
        -: 1242:	}
        3: 1243:	drawCard(currentPlayer, state);
        3: 1244:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        3: 1245:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        2: 1246:	  drawntreasure++;
        -: 1247:	else{
        1: 1248:	  temphand[z]=cardDrawn;
        1: 1249:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        1: 1250:	  z++;
        -: 1251:	}
        -: 1252:  }
        3: 1253:  while(z-1>=0){
        1: 1254:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        1: 1255:	z=z-1;
        -: 1256:  }
        1: 1257:  return 0;
        -: 1258:}  
        -: 1259:
    #####: 1260:int CouncilRoom(int handPos, int choice1, int choice2, int choice3, struct gameState *state){
        -: 1261:
        -: 1262:  int i;
        -: 1263:  int j;
        -: 1264:  int k;
        -: 1265:  int x;
        -: 1266:  int index;
    #####: 1267:  int currentPlayer = whoseTurn(state);
    #####: 1268:  int nextPlayer = currentPlayer + 1;
        -: 1269:
    #####: 1270:  int tributeRevealedCards[2] = {-1, -1};
        -: 1271:  int temphand[MAX_HAND];// moved above the if statement
    #####: 1272:  int drawntreasure=0;
        -: 1273:  int cardDrawn;
    #####: 1274:  int z = 0;// this is the counter for the temp hand
    #####: 1275:  if (nextPlayer > (state->numPlayers - 1)){
    #####: 1276:    nextPlayer = 0;
        -: 1277:  }
        -: 1278:
        -: 1279:  //+4 Cards
    #####: 1280:  for (i = 0; i < 5; i++)
        -: 1281:	{
    #####: 1282:	  drawCard(currentPlayer, state);
        -: 1283:	}
        -: 1284:
        -: 1285:  //+1 Buy
    #####: 1286:  state->numBuys++;
        -: 1287:
        -: 1288:  //Each other player draws a card
    #####: 1289:  for (i = 0; i < state->numPlayers; i++)
        -: 1290:	{
    #####: 1291:	  if ( i != currentPlayer )
        -: 1292:		{
    #####: 1293:		  drawCard(i, state);
        -: 1294:		}
        -: 1295:	}
        -: 1296:
        -: 1297:  //put played card in played card pile
    #####: 1298:  discardCard(handPos, currentPlayer, state, 0);
        -: 1299:
    #####: 1300:  return 0;
        -: 1301:}
        -: 1302:
    #####: 1303:int Feast(int handPos, int choice1, int choice2, int choice3, struct gameState *state){
        -: 1304:
        -: 1305:  int i;
        -: 1306:  int j;
        -: 1307:  int k;
        -: 1308:  int x;
        -: 1309:  int index;
    #####: 1310:  int currentPlayer = whoseTurn(state);
    #####: 1311:  int nextPlayer = currentPlayer + 1;
        -: 1312:
    #####: 1313:  int tributeRevealedCards[2] = {-1, -1};
        -: 1314:  int temphand[MAX_HAND];// moved above the if statement
    #####: 1315:  int drawntreasure=0;
        -: 1316:  int cardDrawn;
    #####: 1317:  int z = 0;// this is the counter for the temp hand
    #####: 1318:  if (nextPlayer > (state->numPlayers - 1)){
    #####: 1319:    nextPlayer = 0;
        -: 1320:  }
        -: 1321:
        -: 1322:  //gain card with cost up to 5
        -: 1323:  //Backup hand
    #####: 1324:  for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####: 1325:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####: 1326:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -: 1327:  }
        -: 1328:  //Backup hand
        -: 1329:
        -: 1330:  //Update Coins for Buy
    #####: 1331:  updateCoins(currentPlayer, state, 5);
    #####: 1332:  x = 1;//Condition to loop on
    #####: 1333:  while( x != 1) {//Buy one card
        -: 1334:  
    #####: 1335:		  if (supplyCount(choice1, state) <= 0){
        -: 1336:	  if (DEBUG)
        -: 1337:		printf("None of that card left, sorry!\n");
        -: 1338:
        -: 1339:	  if (DEBUG){
        -: 1340:		printf("Cards Left: %d\n", supplyCount(choice1, state));
        -: 1341:	  }
        -: 1342:	}
    #####: 1343:	else if (state->coins < getCost(choice1)){
    #####: 1344:	  printf("That card is too expensive!\n");
        -: 1345:
        -: 1346:	  if (DEBUG){
        -: 1347:		printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1348:	  }
        -: 1349:	}
        -: 1350:	else{
        -: 1351:
        -: 1352:	  if (DEBUG){
        -: 1353:		printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1354:	  }
        -: 1355:
    #####: 1356:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####: 1357:	  x = 0;//No more buying cards
        -: 1358:
        -: 1359:	  if (DEBUG){
        -: 1360:		printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1361:	  }
        -: 1362:
        -: 1363:	}
        -: 1364:  }
        -: 1365:		//Reset Hand
    #####: 1366:  for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####: 1367:	state->hand[currentPlayer][i] = temphand[i];
    #####: 1368:	temphand[i] = -1;
        -: 1369:  }
        -: 1370:  //Reset Hand
        -: 1371:
    #####: 1372:  return 0;
        -: 1373:}
        -: 1374:
        2: 1375:int Mine(int handPos, int choice1, int choice2, int choice3, struct gameState *state){
        -: 1376:
        -: 1377:  int i;
        -: 1378:  int j;
        -: 1379:  int k;
        -: 1380:  int x;
        -: 1381:  int index;
        2: 1382:  int currentPlayer = whoseTurn(state);
        2: 1383:  int nextPlayer = currentPlayer + 1;
        -: 1384:
        2: 1385:  int tributeRevealedCards[2] = {-1, -1};
        -: 1386:  int temphand[MAX_HAND];// moved above the if statement
        2: 1387:  int drawntreasure=0;
        -: 1388:  int cardDrawn;
        2: 1389:  int z = 0;// this is the counter for the temp hand
        2: 1390:  if (nextPlayer > (state->numPlayers - 1)){
    #####: 1391:    nextPlayer = 0;
        -: 1392:  }
        -: 1393:
        2: 1394:  j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1395:
        2: 1396:  if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -: 1397:	{
    #####: 1398:	  return -1;
        -: 1399:	}
        -: 1400:
        2: 1401:  if (choice2 > treasure_map || choice2 < curse)
        -: 1402:	{
    #####: 1403:	  return -1;
        -: 1404:	}
        -: 1405:
        2: 1406:  if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -: 1407:	{
        2: 1408:	  return -1;
        -: 1409:	}
        -: 1410:
    #####: 1411:  gainCard(choice2, state, 2, currentPlayer);
        -: 1412:
        -: 1413:  //discard card from hand
    #####: 1414:  discardCard(handPos, currentPlayer, state, 0);
        -: 1415:
        -: 1416:  //discard trashed card
    #####: 1417:  for (i = 0; i < state->handCount[currentPlayer]-1; i++)
        -: 1418:	{
    #####: 1419:	  if (state->hand[currentPlayer][i] == j)
        -: 1420:		{
    #####: 1421:		  discardCard(i, currentPlayer, state, 0);
    #####: 1422:		  break;
        -: 1423:		}
        -: 1424:	}
        -: 1425:
    #####: 1426:  return 0;
        -: 1427:}
        -: 1428:
        -: 1429:
        1: 1430:int Smithy(int handPos, int choice1, int choice2, int choice3, struct gameState *state){
        -: 1431:
        -: 1432:  int i;
        -: 1433:  int j;
        -: 1434:  int k;
        -: 1435:  int x;
        -: 1436:  int index;
        1: 1437:  int currentPlayer = whoseTurn(state);
        1: 1438:  int nextPlayer = currentPlayer + 1;
        -: 1439:
        1: 1440:  int tributeRevealedCards[2] = {-1, -1};
        -: 1441:  int temphand[MAX_HAND];// moved above the if statement
        1: 1442:  int drawntreasure=0;
        -: 1443:  int cardDrawn;
        1: 1444:  int z = 0;// this is the counter for the temp hand
        1: 1445:  if (nextPlayer > (state->numPlayers - 1)){
    #####: 1446:    nextPlayer = 0;
        -: 1447:  }
        -: 1448:
        -: 1449://+3 Cards
        -: 1450://added bug where the for loop only goes 2 times, not 3
        3: 1451:  for (i = 0; i < 2; i++)
        -: 1452:	{
        2: 1453:	  drawCard(currentPlayer, state);
        -: 1454:	}
        -: 1455:
        -: 1456:  //discard card from hand
        1: 1457:  discardCard(handPos, currentPlayer, state, 0);
        1: 1458:  return 0;
        -: 1459:}
        -: 1460:
        -: 1461:
        -: 1462:
        -: 1463://end of dominion.c
        -: 1464:
